// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using AppKit;
using LiveChartsCore.Drawing;
using LiveChartsCore.SkiaSharpView.Drawing;
using SkiaSharp.Views.Mac;
using System.Threading.Tasks;

namespace StockDesktopWidget.UI.Widgets.AppleMac
{
	[Register ("MotionCanvas")]
	public partial class MotionCanvas : NSView
    {
		public MotionCanvas (IntPtr handle) : base (handle)
		{
		}

        private bool isDrawingLoopRunning;
        private MotionCanvas<SkiaSharpDrawingContext> canvasCore = new MotionCanvas<SkiaSharpDrawingContext>();
        private SKCanvasView canvasView;

        public void Initialize(SkiaSharp.Views.Mac.SKCanvasView canvasView)
        {
            this.canvasView = canvasView;
            if (canvasView is null)
            {

                throw new Exception("Bad");
            }

            canvasView.PaintSurface += CanvasView_PaintSurface;

            canvasCore.Invalidated += CanvasCore_Invalidated;
        }


        public override bool MouseDownCanMoveWindow => true;


        public MotionCanvas<SkiaSharpDrawingContext> CanvasCore => canvasCore;

        private void CanvasCore_Invalidated(MotionCanvas<SkiaSharpDrawingContext> obj)
        {
            Invalidate();
        }

        private void CanvasView_PaintSurface(object sender, SkiaSharp.Views.Mac.SKPaintSurfaceEventArgs e)
        {
            canvasCore.DrawFrame(new SkiaSharpDrawingContext(e.Info, e.Surface, e.Surface.Canvas));
        }

        public void Invalidate()
        {
            BeginInvokeOnMainThread(RunDrawingLoop);
        }

        private async void RunDrawingLoop()
        {
            if (isDrawingLoopRunning) return;

            isDrawingLoopRunning = true;

            var ts = TimeSpan.FromSeconds(1 / 90d);
            while (!canvasCore.IsValid)
            {
                canvasView.SetNeedsDisplayInRect(canvasView.Bounds);
                canvasView.NeedsToDraw(canvasView.Bounds);

                await Task.Delay(ts);
            }
            isDrawingLoopRunning = false;
        }
    }
}
