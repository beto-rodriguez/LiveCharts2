// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Threading.Tasks;
using AppKit;
using CoreGraphics;
using Foundation;
using LiveChartsCore.Drawing;
using LiveChartsCore.SkiaSharpView.Drawing;
using SkiaSharp.Views.Mac;

namespace LiveChartsCore.SkiaSharpView.Xamarin.Mac
{
    [Register(nameof(MotionCanvas))]
    public class MotionCanvas : NSView
    {
        private bool _isDrawingLoopRunning;

        // created in code
        public MotionCanvas()
        {
        }

        // created in code
        public MotionCanvas(CGRect frame)
            : base(frame)
        {
        }

        // created via designer
        public MotionCanvas(IntPtr p)
            : base(p)
        {
        }

        public override void DidAddSubview(NSView? subview)
        {
            base.DidAddSubview(subview);

            if (subview is SKCanvasView view)
            {
                CanvasView = view;

                CanvasView.PaintSurface -= CanvasView_PaintSurface;
                CanvasView.PaintSurface += CanvasView_PaintSurface;
                CanvasCore.Invalidated -= CanvasCore_Invalidated;
                CanvasCore.Invalidated += CanvasCore_Invalidated;
            }

        }

        public SKCanvasView CanvasView { get; private set; } = null!;

        public override bool MouseDownCanMoveWindow => true;

        public MotionCanvas<SkiaSharpDrawingContext> CanvasCore { get; } = new();

        public void Invalidate()
        {
            BeginInvokeOnMainThread(RunDrawingLoop);
        }

        private void CanvasCore_Invalidated(MotionCanvas<SkiaSharpDrawingContext> obj)
        {
            Invalidate();
        }

        private void CanvasView_PaintSurface(object sender, SKPaintSurfaceEventArgs e)
        {
            CanvasCore.DrawFrame(new SkiaSharpDrawingContext(CanvasCore, e.Info, e.Surface, e.Surface.Canvas));
        }

        private async void RunDrawingLoop()
        {
            if (_isDrawingLoopRunning) return;

            _isDrawingLoopRunning = true;

            var ts = TimeSpan.FromSeconds(1 / 90d);
            while (!CanvasCore.IsValid)
            {
                CanvasView.SetNeedsDisplayInRect(CanvasView.Bounds);
                CanvasView.NeedsToDraw(CanvasView.Bounds);

                await Task.Delay(ts).ConfigureAwait(true);
            }
            _isDrawingLoopRunning = false;
        }
    }
}
