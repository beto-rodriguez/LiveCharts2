// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using AppKit;
using LiveChartsCore.Kernel;
using LiveChartsCore;
using LiveChartsCore.SkiaSharpView.Drawing;
using System.Drawing;
using LiveChartsCore.SkiaSharpView;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using LiveChartsCore.Measure;
using LiveChartsCore.Drawing;
using CoreGraphics;

namespace LiveChartsCore.SkiaSharpView.Xamarin.Mac
{
    [Register(nameof(CartesianChart))]
    public class CartesianChart : NSView, ICartesianChartView<SkiaSharpDrawingContext>
    {
        private CollectionDeepObserver<ISeries> seriesObserver;
        private CollectionDeepObserver<IAxis> xObserver;
        private CollectionDeepObserver<IAxis> yObserver;
        protected Chart<SkiaSharpDrawingContext> core;
        protected IChartLegend<SkiaSharpDrawingContext> legend;
        protected IChartTooltip<SkiaSharpDrawingContext> tooltip;
        private ActionThrottler mouseMoveThrottler;
        private PointF mousePosition = new PointF();

        private IEnumerable<ISeries> _series = new ObservableCollection<ISeries>();
        private IEnumerable<IAxis> _xAxis = new List<IAxis>();
        private IEnumerable<IAxis> _yAxis = new List<IAxis>();

        private CGRect safeBounds;
        private nfloat safeScaleFactor = 1;

        // created in code
        public CartesianChart()
        {
            Initialize();
        }

        // created in code
        public CartesianChart(CGRect frame)
            : base(frame)
        {
            Initialize();
        }

        // created via designer
        public CartesianChart(IntPtr p)
            : base(p)
        {
        }

        // created via designer
        public override void AwakeFromNib()
        {
            Initialize();
        }

        private void Initialize()
        {
            MotionCanvas = new MotionCanvas();
            safeScaleFactor = NSScreen.MainScreen.BackingScaleFactor;
            safeBounds = Bounds;

            if (!LiveCharts.IsConfigured) LiveCharts.Configure(LiveChartsSkiaSharp.DefaultPlatformBuilder);

            var stylesBuilder = LiveCharts.CurrentSettings.GetStylesBuilder<SkiaSharpDrawingContext>();
            var initializer = stylesBuilder.GetInitializer();
            if (stylesBuilder.CurrentColors == null || stylesBuilder.CurrentColors.Length == 0)
                throw new Exception("Default colors are not valid");
            initializer.ConstructChart(this);

            InitializeCore();

            //mouseMoveThrottler = new ActionThrottler(MouseMoveThrottlerUnlocked, TimeSpan.FromMilliseconds(10));

            seriesObserver = new CollectionDeepObserver<ISeries>(OnDeepCollectionChanged, OnDeepCollectionPropertyChanged, true);
            xObserver = new CollectionDeepObserver<IAxis>(OnDeepCollectionChanged, OnDeepCollectionPropertyChanged, true);
            yObserver = new CollectionDeepObserver<IAxis>(OnDeepCollectionChanged, OnDeepCollectionPropertyChanged, true);

            XAxes = new List<IAxis>() { new Axis() };
            YAxes = new List<IAxis>() { new Axis() };
            Series = new ObservableCollection<ISeries>();
        }

        private protected MotionCanvas MotionCanvas { get; private set; }

        public override bool MouseDownCanMoveWindow => true;

        public ZoomAndPanMode ZoomMode { get; set; }

        public double ZoomingSpeed { get; set; } = 0.5;

        public CartesianChart<SkiaSharpDrawingContext> Core => (CartesianChart<SkiaSharpDrawingContext>)core;

        public MotionCanvas<SkiaSharpDrawingContext> CoreCanvas => MotionCanvas.CanvasCore;

        public IChartLegend<SkiaSharpDrawingContext> Legend => legend;

        public IChartTooltip<SkiaSharpDrawingContext> Tooltip => tooltip;

        public PointStatesDictionary<SkiaSharpDrawingContext> PointStates { get; set; }

        public Margin DrawMargin { get; set; }

        public TimeSpan AnimationsSpeed { get; set; } = TimeSpan.FromMilliseconds(500);

        public Func<float, float> EasingFunction { get; set; } = EasingFunctions.SinOut;

        public LegendPosition LegendPosition { get; set; } = LegendPosition.Hidden;

        public LegendOrientation LegendOrientation { get; set; } = LegendOrientation.Auto;

        public TooltipPosition TooltipPosition { get; set; } = TooltipPosition.Hidden;

        public TooltipFindingStrategy TooltipFindingStrategy { get; set; } = TooltipFindingStrategy.CompareOnlyX;

        public IEnumerable<IAxis> XAxes
        {
            get => _xAxis;
            set
            {
                xObserver.Dispose(_xAxis);
                _xAxis = value;
                xObserver.Initialize(value);
                if (core is null)
                {
                    return;
                }

                BeginInvokeOnMainThread(() => core.Update());
            }
        }

        public IEnumerable<IAxis> YAxes
        {
            get => _yAxis;
            set
            {
                yObserver.Dispose(_yAxis);
                _yAxis = value;
                yObserver.Initialize(value);
                if (core is null)
                {
                    return;
                }

                BeginInvokeOnMainThread(() => core.Update());
            }
        }

        public IEnumerable<ISeries> Series
        {
            get => _series;
            set
            {

                seriesObserver.Dispose(_series);
                _series = value;
                seriesObserver.Initialize(value);
                if (core is null)
                {
                    return;
                }

                BeginInvokeOnMainThread(() => core.Update());
            }
        }

        public SizeF ControlSize
        {
            get
            {
                return new SizeF
                {
                    Height = (float)(safeBounds.Height * safeScaleFactor),
                    Width = (float)(safeBounds.Width * safeScaleFactor)
                };
            }
        }

        public override void ViewDidMoveToWindow()
        {
            base.ViewDidMoveToWindow();
            Window.DidResize += Window_DidResize;

        }

        public PointF ScaleUIPoint(PointF point, int xAxisIndex = 0, int yAxisIndex = 0)
        {
            return Core.ScaleUIPoint(point, xAxisIndex, yAxisIndex);
        }

        protected void InitializeCore()
        {
            core = new CartesianChart<SkiaSharpDrawingContext>(this, LiveChartsSkiaSharp.DefaultPlatformBuilder, MotionCanvas.CanvasCore);
            //legend = Template.FindName("legend", this) as IChartLegend<SkiaSharpDrawingContext>;
            //tooltip = Template.FindName("tooltip", this) as IChartTooltip<SkiaSharpDrawingContext>;
            BeginInvokeOnMainThread(() => core.Update());
        }

        private void OnDeepCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            InvokeOnMainThread(() => core.Update());

        }

        private void OnDeepCollectionPropertyChanged(object sender, PropertyChangedEventArgs e)
        {
            InvokeOnMainThread(() => core.Update());
        }

        private void Window_DidResize(object sender, EventArgs e)
        {
            safeBounds = Bounds;
            core.Update();
        }
    }
}
